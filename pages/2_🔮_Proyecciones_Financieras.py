# pages/2_üîÆ_Proyecciones_Financieras.py
import streamlit as st
import pandas as pd
import numpy as np
from analisis_adicional import construir_flujo_de_caja # Importamos la nueva funci√≥n
from mi_logica_original import COL_CONFIG, get_principal_account_value

st.set_page_config(layout="wide", page_title="Proyecciones Financieras")
st.title("üîÆ Proyecciones y Flujo de Caja")

# --- Verificaci√≥n de autenticaci√≥n y carga de datos ---
if 'authenticated' not in st.session_state or not st.session_state.authenticated:
    st.warning("Por favor, autent√≠cate en la p√°gina principal para continuar.")
    st.stop()
if 'datos_historicos' not in st.session_state or not st.session_state.datos_historicos:
    st.error("No se han cargado datos hist√≥ricos. Ve a la p√°gina principal y refresca los datos.")
    st.stop()

datos_historicos = st.session_state.datos_historicos
sorted_periods = sorted(datos_historicos.keys(), reverse=True)
ultimo_periodo = sorted_periods[0]

# --- Pesta√±as de Proyecciones ---
tab1, tab2 = st.tabs(["üí∏ Estado de Flujo de Caja", "üöÄ Proyecciones a Futuro"])

# ==============================================================================
#                        PESTA√ëA 1: ESTADO DE FLUJO DE CAJA
# ==============================================================================
with tab1:
    st.header("An√°lisis del Flujo de Caja (M√©todo Indirecto)")
    st.markdown("Entiende c√≥mo las actividades de operaci√≥n, inversi√≥n y financiaci√≥n impactan la posici√≥n de efectivo de la empresa.")
    
    col1, col2 = st.columns(2)
    with col1:
        periodo_actual_fc = st.selectbox("Periodo a Analizar:", sorted_periods, key="periodo_fc_actual")
    with col2:
        periodos_anteriores_fc = [p for p in sorted_periods if p < periodo_actual_fc]
        periodo_anterior_fc = st.selectbox(
            "Periodo Anterior (para c√°lculo de variaciones):", 
            periodos_anteriores_fc, 
            key="periodo_fc_anterior",
            disabled=not periodos_anteriores_fc
        )

    if periodo_anterior_fc:
        # Cargar datos necesarios
        df_er_actual = datos_historicos[periodo_actual_fc]['df_er_master']
        df_bg_actual = datos_historicos[periodo_actual_fc]['df_bg_master']
        df_bg_anterior = datos_historicos[periodo_anterior_fc]['df_bg_master']
        
        er_conf = COL_CONFIG['ESTADO_DE_RESULTADOS']
        bg_conf = COL_CONFIG['BALANCE_GENERAL']
        total_col_name = er_conf.get('CENTROS_COSTO_COLS', {}).get('Total', 'Total_Consolidado_ER')

        with st.spinner("Construyendo el Estado de Flujo de Caja..."):
            df_flujo_caja = construir_flujo_de_caja(
                df_er_actual, df_bg_actual, df_bg_anterior,
                val_col_er=total_col_name,
                cuenta_er=er_conf['CUENTA'],
                saldo_final_bg=bg_conf['SALDO_FINAL'],
                cuenta_bg=bg_conf['CUENTA']
            )
        
        st.subheader("Estado de Flujo de Caja")
        st.dataframe(df_flujo_caja.style.format({'Valor': "${:,.0f}"}), use_container_width=True)

        # An√°lisis con IA del Flujo de Caja
        with st.expander("üß† Ver An√°lisis del Flujo de Caja por IA", expanded=True):
            fco = df_flujo_caja.loc[df_flujo_caja['Concepto'] == '**Flujo de Efectivo de Operaci√≥n (FCO)**', 'Valor'].iloc[0]
            fci = df_flujo_caja.loc[df_flujo_caja['Concepto'] == '**Flujo de Efectivo de Inversi√≥n (FCI)**', 'Valor'].iloc[0]
            fcf = df_flujo_caja.loc[df_flujo_caja['Concepto'] == '**Flujo de Efectivo de Financiaci√≥n (FCF)**', 'Valor'].iloc[0]
            
            prompt_flujo_caja = f"""
            **Rol:** Eres un CFO virtual analizando el flujo de caja. Tu an√°lisis debe ser directo y accionable.
            **Contexto:** Se ha generado el siguiente resumen de flujo de caja para el periodo {periodo_actual_fc}:
            - Flujo de Efectivo de Operaci√≥n (FCO): ${fco:,.0f}
            - Flujo de Efectivo de Inversi√≥n (FCI): ${fci:,.0f}
            - Flujo de Efectivo de Financiaci√≥n (FCF): ${fcf:,.0f}

            **Instrucciones:**
            1.  **Diagn√≥stico General:** ¬øLa empresa genera o consume efectivo? ¬øDe d√≥nde proviene y a d√≥nde va el dinero?
            2.  **An√°lisis por Componente:**
                - **Operaci√≥n (FCO):** Si es positivo, la operaci√≥n es sana. Si es negativo, es una se√±al de alerta.
                - **Inversi√≥n (FCI):** Si es negativo, la empresa est√° invirtiendo en crecer (bueno). Si es positivo, podr√≠a estar desinvirtiendo.
                - **Financiaci√≥n (FCF):** Si es positivo, est√° entrando dinero por deuda o capital. Si es negativo, se est√° pagando deuda o dividendos.
            3.  **Veredicto Final:** Concluye con un veredicto sobre la salud del flujo de caja. ¬øEl patr√≥n es sostenible? (Ej: "Patr√≥n saludable de crecimiento", "Dependencia de financiaci√≥n externa", "Alerta de quema de efectivo operativo").
            """
            # Aqu√≠, de nuevo, ir√≠a la llamada a la IA. Mostramos un ejemplo.
            analisis_ia_flujo = f"""
            ###  Diagn√≥stico del Flujo de Caja üéØ

            #### An√°lisis por Componente
            * **üíß Operaci√≥n (FCO):** {'Genera' if fco >= 0 else 'Consume'} **${abs(fco):,.0f}**. Un FCO positivo indica que el negocio principal es autosuficiente y genera el efectivo necesario para operar, lo cual es una se√±al muy saludable.
            * **üèóÔ∏è Inversi√≥n (FCI):** Se {'invirtieron' if fci < 0 else 'recibieron'} **${abs(fci):,.0f}**. Un valor negativo aqu√≠ es t√≠picamente positivo, ya que sugiere que la empresa est√° invirtiendo en activos fijos para su crecimiento futuro.
            * **üè¶ Financiaci√≥n (FCF):** Se {'obtuvieron' if fcf >= 0 else 'pagaron'} **${abs(fcf):,.0f}** a trav√©s de actividades de financiaci√≥n. Esto puede indicar nueva deuda, pago de pr√©stamos o dividendos.

            #### Veredicto Final üìú
            El perfil de flujo de caja actual sugiere un **patr√≥n de crecimiento saludable**. La empresa genera efectivo a trav√©s de sus operaciones, lo cual utiliza para financiar su expansi√≥n (inversi√≥n) y, posiblemente, para gestionar su estructura de capital. Este es el escenario ideal para una empresa en fase de crecimiento.
            """
            st.markdown(analisis_ia_flujo)

    else:
        st.info("Selecciona un periodo anterior para poder calcular las variaciones y construir el flujo de caja.")

# ==============================================================================
#                           PESTA√ëA 2: PROYECCIONES
# ==============================================================================
with tab2:
    st.header("Proyecci√≥n de Estados Financieros")
    st.markdown("Estima los resultados futuros bas√°ndote en supuestos de crecimiento y comportamiento hist√≥rico.")

    # --- Par√°metros de Proyecci√≥n ---
    st.sidebar.header("Par√°metros de Proyecci√≥n")
    crecimiento_ingresos = st.sidebar.slider("Crecimiento de Ingresos (%) para el pr√≥ximo periodo", -20.0, 50.0, 5.0, 0.5) / 100
    porc_costo_venta = st.sidebar.slider("% Costo de Venta sobre Ingresos", 30.0, 90.0, 60.0, 0.5) / 100
    porc_gasto_op = st.sidebar.slider("% Gastos Operativos sobre Ingresos", 10.0, 50.0, 25.0, 0.5) / 100

    # --- L√≥gica de Proyecci√≥n (Simplificada) ---
    kpis_ultimo_periodo = datos_historicos[ultimo_periodo]['kpis']['Todos']
    
    # Proyecci√≥n ER
    ingresos_proy = kpis_ultimo_periodo['ingresos'] * (1 + crecimiento_ingresos)
    costo_venta_proy = ingresos_proy * porc_costo_venta * -1
    utilidad_bruta_proy = ingresos_proy + costo_venta_proy
    gasto_op_proy = ingresos_proy * porc_gasto_op * -1
    utilidad_op_proy = utilidad_bruta_proy + gasto_op_proy
    utilidad_neta_proy = utilidad_op_proy # Simplificado
    
    # Proyecci√≥n BG (muy simplificada, se necesita m√°s l√≥gica para un modelo robusto)
    df_bg_ultimo = datos_historicos[ultimo_periodo]['df_bg_master']
    saldo_final_col = COL_CONFIG['BALANCE_GENERAL']['SALDO_FINAL']
    cuenta_bg_col = COL_CONFIG['BALANCE_GENERAL']['CUENTA']
    
    caja_inicial = get_principal_account_value(df_bg_ultimo, '11', saldo_final_col, cuenta_bg_col)
    caja_final_proy = caja_inicial + utilidad_neta_proy # Supuesto ultra-simplificado
    activo_proy = get_principal_account_value(df_bg_ultimo, '1', saldo_final_col, cuenta_bg_col) + (caja_final_proy - caja_inicial)
    pasivo_proy = get_principal_account_value(df_bg_ultimo, '2', saldo_final_col, cuenta_bg_col)
    patrimonio_proy = get_principal_account_value(df_bg_ultimo, '3', saldo_final_col, cuenta_bg_col) + utilidad_neta_proy

    # --- Mostrar Resultados ---
    st.subheader("Estado de Resultados Proyectado")
    df_proy_er = pd.DataFrame({
        'Concepto': ['Ingresos', 'Costo de Ventas', '**Utilidad Bruta**', 'Gastos Operativos', '**Utilidad Neta Proyectada**'],
        'Valor': [ingresos_proy, costo_venta_proy, utilidad_bruta_proy, gasto_op_proy, utilidad_neta_proy]
    })
    st.dataframe(df_proy_er.style.format({'Valor': "${:,.0f}"}), use_container_width=True)

    st.subheader("Balance General Proyectado")
    df_proy_bg = pd.DataFrame({
        'Concepto': ['Activo', 'Pasivo', 'Patrimonio', '**Verificaci√≥n (A=P+Pt)**'],
        'Valor': [activo_proy, pasivo_proy, patrimonio_proy, activo_proy - (pasivo_proy + patrimonio_proy)]
    })
    st.dataframe(df_proy_bg.style.format({'Valor': "${:,.0f}"}), use_container_width=True)
    
    st.warning("Nota: Las proyecciones del Balance General y Flujo de Caja son simplificadas. Un modelo completo requerir√≠a supuestos detallados sobre capital de trabajo, inversiones y financiaci√≥n.")
